import subprocess
import gmpy2
import math 
from Crypto.Cipher import AES
from hashlib import sha256

def decrypt(enc, password):
    private_key = password.decode("hex")
    cipher = AES.new(private_key, AES.MODE_ECB)
    return cipher.decrypt(enc)


def countBits(number): 
      
    # log function in base 2  
    # take only integer part 
    return int((math.log(number) / 
                math.log(2)) + 1); 


n_alice=26030821674013802054980894925652182457514904937178819251814289656830291150098477237691485032663069106233900943524212887725721548046676494120137816006813076052940323820486809239998883197090740309595041876995279348553484561426381221478882423413399912751471561720153536546701770627413772799141505664613936945721190949119102379185578188983733193595667041094362133054929843389581753390398491914966210209371288648372531802428798788195350560549756502366547487366010671890664612524084434636171390473365214661148273064362616795524430298200777834339709757347706049331444020569668012117646658114893451881625684755119269761243629
n_bob=24929282176127666190228759845980607632088731790868498212196284560460016658016882738995010230631947931736555503125110201175883848541731923749997413637387734339990062321605369884836637742590324927207616418722861058405721996274281298029528955699685777379281487715816547693378207765077276207532662261318525470695778199740131794772825700846261279596270921185579205377433603804225502743629694863378082641559816651140868164525743831174697533258957421927462831912738194567304777524935030811029568931818819904022408376400175422041650251532204432418235434680048885732335975400249014482715324236914072260186193722159975772544869
#pe astea 2 le-am scos separat, dar nu ajuta la nimic, le-am pus doar de forma
blob='001893834DF42280C7A3D695ED87D986A2DD87E5BF43C4B5DEA50018172FFF3690221206BE2780BD99DC5A3C3A632D637595721D8E468C11326435BDA16CD0E7FDE4CC23'
c1=blob[4:][:48] #primul ciphertext
c2=blob[len(c1)+4+4:][:-32] #al doilea ciphertet
ciphertext=blob[-32:] #criptarea cu AES
details = subprocess.check_output("openssl rsa -pubin -inform PEM -text -noout < alice.pem | grep Exp", shell=True).strip()
details=details.split(' ')
e_alice=details[1] #e-ul lui alice
details = subprocess.check_output("openssl rsa -pubin -inform PEM -text -noout < bob.pem | grep Exp", shell=True).strip()
details=details.split(' ')
e_bob=details[1] #e-ul lui bob


gs = gmpy2.mpz(int(c1,16))
ge = gmpy2.mpz(e_alice)
k1, exact = gmpy2.iroot(gs, ge)
k1=format(k1,'x') #k1, scos cu radical de ordin n
gs = gmpy2.mpz(int(c2,16))
ge = gmpy2.mpz(e_bob)
k2, exact = gmpy2.iroot(gs, ge)
k2=format(k2,'x') #k2, scos cu radical de ordin n

k=int(k1,16)^int(k2,16)
k=hex(k)[2:][:-1] #k-ul folosit in sha

key=sha256(k.decode('hex')).hexdigest() # cheia pentru aes
print "Flag:",decrypt(ciphertext.decode('hex'),key)
